permissions:
  contents: read

on:
  workflow_call:
    inputs:
      rust:
        required: false
        type: string
        default: nightly
      target:
        required: false
        type: string
      args:
        required: false
        type: string
      clippy:
        required: false
        type: boolean
        default: true
      check-cfg:
        required: false
        type: boolean
        default: true
      known-cfgs:
        required: false
        type: string

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  tidy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: taiki-e/github-actions/checkout@main
      - id: pre
        run: |
          if [[ -n "$(git ls-files '*.rs')" ]]; then
            echo "rust=true" >>"${GITHUB_OUTPUT}"
          fi
      - name: Install Rust
        # TODO: do not install clippy if unneeded
        run: rustup toolchain add "${{ inputs.rust }}" --no-self-update --profile minimal --component clippy,rustfmt && rustup default "${{ inputs.rust }}"
        if: steps.pre.outputs.rust == 'true'
      - uses: taiki-e/install-action@shellcheck
      - uses: taiki-e/install-action@shfmt
      - name: Run cargo clippy
        run: |
          set -eEuo pipefail
          trap 's=$?; echo >&2 "$0: error on line "${LINENO}": ${BASH_COMMAND}"; exit ${s}' ERR
          args=(--workspace --all-targets ${{ inputs.args }})
          if [[ "${{ inputs.args }}" != *"-features"* ]]; then
            args+=(--all-features)
          fi
          if [[ "${{ inputs.check-cfg }}" == "true" ]]; then
            args+=(-Z check-cfg)
          elif [[ -n "${{ inputs.known-cfgs }}" ]]; then
            echo "known-cfgs requires check-cfg"
            exit 1
          fi
          known_cfgs=(rustfmt careful ${{ inputs.known-cfgs }})
          IFS=$'\n\t'
          metadata=$(cargo metadata --format-version=1 --no-deps)
          # Handle target inputs.
          input_target="${{ inputs.target }}"
          if [[ -n "${input_target}" ]]; then
            while read -rd,; do
              args+=(--target="${REPLY}")
              rustup target add "${REPLY}" || true # tier 3 targets fail to install rustup target
            done <<<"${input_target},"
          fi
          if [[ "${{ inputs.check-cfg }}" == "true" ]]; then
            check_cfg='-Z unstable-options --check-cfg=cfg(target_pointer_width,values("128")) --check-cfg=cfg(target_arch,values("xtensa"))'
            for id in $(jq <<<"${metadata}" '.workspace_members[]'); do
              pkg=$(jq <<<"${metadata}" ".packages[] | select(.id == ${id})")
              manifest_path=$(jq <<<"${pkg}" -r '.manifest_path')
              build_script_path=$(dirname "${manifest_path}")/build.rs
              if [[ -e "${build_script_path}" ]] && grep -Eq 'cargo:rustc-cfg=' "${build_script_path}"; then
                known_cfgs+=($(grep -E 'cargo:rustc-cfg=' "${build_script_path}" | sed -E 's/^.*cargo:rustc-cfg=//; s/(=\\)?".*$//' | LC_ALL=C sort -u))
              fi
            done
            if [[ ${#known_cfgs[@]} -gt 0 ]]; then
              check_cfg+=" --check-cfg=cfg($(IFS=',' && echo "${known_cfgs[*]}"))"
            fi
            export RUSTFLAGS="${RUSTFLAGS:-} ${check_cfg}"
          fi
          if [[ -n "${RUSTFLAGS:-}" ]]; then
              echo "+ RUSTFLAGS='${RUSTFLAGS}' \\"
          fi
          (
            set -x
            cargo clippy "${args[@]}"
          )
        if: always() && steps.pre.outputs.rust == 'true' && inputs.clippy
      - run: cat tools/.tidy-check-license-headers
        if: always()
      - run: cat .cspell.json
        if: always()
      - run: tools/tidy.sh
        if: always()
