permissions:
  contents: read

on:
  workflow_call:
    inputs:
      rust:
        required: false
        type: string
        default: stable,beta,nightly
      component:
        required: false
        type: string
      optional-deps:
        required: false
        type: string
        default: --optional-deps
      test-args:
        required: false
        type: string
      careful:
        required: false
        type: boolean
        default: true
      careful-args:
        required: false
        type: string
      doc-nightly-only:
        required: false
        type: boolean
        default: false
      build-args:
        required: false
        type: string
      no-std:
        required: false
        type: boolean
        default: true
      no-std-target:
        required: false
        type: string
        default: thumbv6m-none-eabi
      no-std-args:
        required: false
        type: string
      minimal-versions:
        required: false
        type: boolean
        default: true
      minimal-versions-args:
        required: false
        type: string
      direct-minimal-versions:
        required: false
        type: boolean
        default: true
      direct-minimal-versions-args:
        required: false
        type: string

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  # Reusable workflows cannot inherit environment variables.
  ATOMIC_MAYBE_UNINIT_DENY_WARNINGS: 1
  CARGO_HACK_DENY_WARNINGS: 1
  CARGO_LLVM_COV_DENY_WARNINGS: 1
  CARGO_MINIMAL_VERSIONS_DENY_WARNINGS: 1
  CARGO_NO_DEV_DEPS_DENY_WARNINGS: 1
  CONST_FN_DENY_WARNINGS: 1
  PORTABLE_ATOMIC_DENY_WARNINGS: 1
  SEMIHOSTING_DENY_WARNINGS: 1

defaults:
  run:
    shell: bash --noprofile --norc -CeEuo pipefail {0}

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: taiki-e/checkout-action@v1
      - id: prepare
        run: |
          trap -- 's=$?; printf >&2 "%s\n" "${0##*/}:${LINENO}: \`${BASH_COMMAND}\` exit with ${s}"; exit ${s}' ERR
          IFS=$'\n\t'
          # Handle rust inputs.
          input_rust="${{ inputs.rust }}"
          matrix=''
          last=''
          while read -rd,; do
            matrix+=',{"rust":"'"${REPLY}"'"}'
            last="${REPLY}"
          done <<<"${input_rust:?},"
          matrix+=',{"rust":"'"${last}"'","os":"macos-latest"}'
          matrix+=',{"rust":"'"${last}"'","os":"windows-latest"}'
          printf '%s\n' "matrix={\"include\":[${matrix#,}]}" >>"${GITHUB_OUTPUT}"
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}

  test:
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - id: prepare
        run: |
          IFS=$'\n\t'
          metadata=$(cargo metadata --format-version=1 --no-deps)
          # Publishing is unrestricted if null, and forbidden if an empty array.
          for pkg in $(jq -c '. as $metadata | .workspace_members[] as $id | $metadata.packages[] | select(.id == $id and .publish != [])' <<<"${metadata}"); do
            if ! jq '.targets[] | .kind[]' <<<"${pkg}" | grep -Fq '"proc-macro"'; then
              printf 'no-std=true\n' >>"${GITHUB_OUTPUT}"
              break
            fi
          done
        if: inputs.no-std
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ matrix.rust }}
          component: ${{ inputs.component }}${{ (!contains(inputs.component, 'rust-src') && inputs.careful && startsWith(matrix.rust, 'nightly')) && 'rust-src' || '' }}
          target: ${{ (inputs.no-std && steps.prepare.outputs.no-std == 'true') && inputs.no-std-target || '' }}
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions
        if: inputs.minimal-versions || (inputs.direct-minimal-versions && !(startsWith(matrix.rust, '1.3') || startsWith(matrix.rust, '1.4') || startsWith(matrix.rust, '1.5') || startsWith(matrix.rust, '1.6')))
      - uses: taiki-e/install-action@cargo-careful
        if: inputs.careful && startsWith(matrix.rust, 'nightly')
      - run: cargo test --all --all-features --tests ${{ inputs.test-args }}
        if: inputs.doc-nightly-only && !startsWith(matrix.rust, 'nightly')
      - run: cargo test --all --all-features ${{ inputs.test-args }}
        if: (!(inputs.doc-nightly-only && !startsWith(matrix.rust, 'nightly')))
      - run: cargo careful test --all --all-features ${{ inputs.careful-args }}
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -Z randomize-layout
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -Z randomize-layout
        if: inputs.careful && startsWith(matrix.rust, 'nightly')
      - run: cargo hack build --workspace --no-private --feature-powerset ${{ inputs.optional-deps }} --no-dev-deps ${{ inputs.build-args }}
      - run: cargo hack build --workspace --no-private --feature-powerset ${{ inputs.optional-deps }} --no-dev-deps --target="${{ inputs.no-std-target }}" ${{ inputs.no-std-args }}
        if: inputs.no-std && steps.prepare.outputs.no-std == 'true'
      - run: cargo minimal-versions build --workspace --no-private --detach-path-deps=skip-exact --all-features ${{ inputs.minimal-versions-args }}
        if: inputs.minimal-versions
      - run: cargo minimal-versions build --workspace --no-private --detach-path-deps=skip-exact --all-features --direct ${{ inputs.direct-minimal-versions-args }}
        # -Z direct-minimal-versions requires Cargo 1.70.
        if: inputs.direct-minimal-versions && !(startsWith(matrix.rust, '1.3') || startsWith(matrix.rust, '1.4') || startsWith(matrix.rust, '1.5') || startsWith(matrix.rust, '1.6'))
