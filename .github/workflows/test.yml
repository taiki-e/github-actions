# Run `cargo test` `cargo careful test` + `cargo hack build --feature-powerset` + `cargo minimal-versions build`.
#
# There is no stability guarantee for this workflow, since it's supposed to only be
# used in infra managed by us.
#
# Usage:
#
# ```yml
#   test:
#     uses: taiki-e/github-actions/.github/workflows/test.yml@main
# ```
#
# See "on.workflow_call.inputs" below for input options.

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      rust:
        required: false
        type: string
        default: stable,beta,nightly
      component:
        required: false
        type: string
      target:
        required: false
        type: string
        default: x86_64-unknown-linux-gnu,aarch64-apple-darwin,x86_64-pc-windows-msvc
      optional-deps:
        required: false
        type: string
        default: --optional-deps
      features:
        required: false
        type: string
        default: --all-features
      test-args:
        required: false
        type: string
      test-fat-lto:
        required: false
        type: boolean
        default: false
      careful:
        required: false
        type: boolean
        default: true
      careful-args:
        required: false
        type: string
      doc-nightly-only:
        required: false
        type: boolean
        default: false
      build-args:
        required: false
        type: string
      no-std:
        required: false
        type: boolean
        default: true
      no-std-target:
        required: false
        type: string
        default: thumbv6m-none-eabi
      no-std-args:
        required: false
        type: string
      minimal-versions:
        required: false
        type: boolean
        default: true
      minimal-versions-args:
        required: false
        type: string
      direct-minimal-versions:
        required: false
        type: boolean
        default: true
      direct-minimal-versions-args:
        required: false
        type: string

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  # Reusable workflows cannot inherit environment variables.
  ATOMIC_MAYBE_UNINIT_DENY_WARNINGS: 1
  CARGO_HACK_DENY_WARNINGS: 1
  CARGO_LLVM_COV_DENY_WARNINGS: 1
  CARGO_MINIMAL_VERSIONS_DENY_WARNINGS: 1
  CARGO_NO_DEV_DEPS_DENY_WARNINGS: 1
  CONST_FN_DENY_WARNINGS: 1
  PORTABLE_ATOMIC_DENY_WARNINGS: 1
  SEMIHOSTING_DENY_WARNINGS: 1

defaults:
  run:
    shell: bash --noprofile --norc -CeEuo pipefail {0}

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: taiki-e/checkout-action@v1
      - name: Prepare
        id: prepare
        run: |
          trap -- 's=$?; printf >&2 "%s\n" "${0##*/}:${LINENO}: \`${BASH_COMMAND}\` exit with ${s}"; exit ${s}' ERR
          IFS=$'\n\t'
          # Handle target inputs.
          input_target="${{ inputs.target }}"
          default_target=''
          other_targets=()
          if [[ -n "${input_target}" ]]; then
            while read -rd,; do
              if [[ -z "${default_target}" ]]; then
                default_target="${REPLY}"
              else
                other_targets+=("${REPLY}")
              fi
            done <<<"${input_target:?},"
          fi
          # Handle rust inputs.
          input_rust="${{ inputs.rust }}"
          matrix=''
          last=''
          add_matrix() {
            target="$1"
            rust="$2"
            case "${target}" in
              x86_64-unknown-linux-gnu) matrix+=',{"rust":"'"${rust}"'","os":"ubuntu-latest"}' ;;
              aarch64-unknown-linux-gnu) matrix+=',{"rust":"'"${rust}"'","os":"ubuntu-24.04-arm"}' ;;
              armv7*-linux-gnueabihf | thumbv7*-linux-gnueabihf) matrix+=',{"rust":"'"${rust}"'","target":"'"${target}"'","os":"ubuntu-24.04-arm"}' ;;
              aarch64-apple-darwin) matrix+=',{"rust":"'"${rust}"'","os":"macos-latest"}' ;;
              *-apple-*) matrix+=',{"rust":"'"${rust}"'","target":"'"${target}"'","os":"macos-latest"}' ;;
              x86_64-pc-windows-msvc) matrix+=',{"rust":"'"${rust}"'","os":"windows-latest"}' ;;
              x86_64-pc-windows-* | i686-pc-windows-*) matrix+=',{"rust":"'"${rust}-${target}"'","os":"windows-latest"}' ;;
              aarch64-pc-windows-msvc) matrix+=',{"rust":"'"${rust}"'","os":"windows-11-arm"}' ;;
              arm64ec-pc-windows-msvc) matrix+=',{"rust":"'"${rust}"'","target":"'"${target}"'","os":"windows-11-arm"}' ;;
              *) matrix+=',{"rust":"'"${rust}"'","target":"'"${target}"'","os":"ubuntu-latest"}' ;;
            esac
          }
          while read -rd,; do
            add_matrix "${default_target}" "${REPLY}"
            last="${REPLY}"
          done <<<"${input_rust:?},"
          for target in "${other_targets[@]}"; do
            add_matrix "${target}" "${last}"
          done
          printf '%s\n' "matrix={\"include\":[${matrix#,}]}" >>"${GITHUB_OUTPUT}"
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}

  test:
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - name: Prepare for no-std/minimal-versions/direct-minimal-versions
        id: prepare
        run: |
          trap -- 's=$?; printf >&2 "%s\n" "${0##*/}:${LINENO}: \`${BASH_COMMAND}\` exit with ${s}"; exit ${s}' ERR
          IFS=$'\n\t'
          metadata=$(cargo metadata --format-version=1 --no-deps)
          has_public=''
          # Publishing is unrestricted if null, and forbidden if an empty array.
          for pkg in $(jq -c '. as $metadata | .workspace_members[] as $id | $metadata.packages[] | select(.id == $id and .publish != [])' <<<"${metadata}"); do
            has_public=1
            if ! jq '.targets[] | .kind[]' <<<"${pkg}" | grep -Fq '"proc-macro"'; then
              printf 'no-std=true\n' >>"${GITHUB_OUTPUT}"
              break
            fi
          done
          if [[ -n "${has_public}" ]]; then
            printf 'minimal-versions=true\n' >>"${GITHUB_OUTPUT}"
            # -Z direct-minimal-versions requires Cargo 1.70.
            case "${{ matrix.rust }}" in
              1.? | 1.[1-6]?) ;;
              *) printf 'direct-minimal-versions=true\n' >>"${GITHUB_OUTPUT}" ;;
            esac
          fi
        if: inputs.no-std || inputs.minimal-versions || inputs.direct-minimal-versions
      - name: Prepare for doc-nightly-only
        run: |
          if [[ "${{ inputs.test-args }}" != *"--test"* ]]; then
            printf 'TESTS=--tests\n' >>"${GITHUB_ENV}"
          fi
        if: inputs.doc-nightly-only && !startsWith(matrix.rust, 'nightly')
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ matrix.rust }}
          component: ${{ inputs.component }}${{ (!contains(inputs.component, 'rust-src') && inputs.careful && startsWith(matrix.rust, 'nightly')) && 'rust-src' || '' }}
          target: ${{ (inputs.no-std && steps.prepare.outputs.no-std == 'true' && matrix.target == '') && inputs.no-std-target || '' }}
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions
        if: inputs.minimal-versions && steps.prepare.outputs.minimal-versions == 'true' || inputs.direct-minimal-versions && steps.prepare.outputs.direct-minimal-versions == 'true'
      - uses: taiki-e/install-action@cargo-careful
        # Skip -windows-gnu because cannot find rsbegin.o/rsend.o when building std
        if: inputs.careful && startsWith(matrix.rust, 'nightly') && !(contains(matrix.rust, '-windows-gnu') || contains(matrix.target, '-windows-gnu'))
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: matrix.target != ''
      - run: printf '%s\n' "TARGET=--target=${{ matrix.target }}" >>"${GITHUB_ENV}"
        if: matrix.target != ''
      - run: cargo test --all ${{ inputs.features }} ${TESTS:-} ${TARGET:-} ${DOCTEST_XCOMPILE:-} ${BUILD_STD:-} ${{ inputs.test-args }}
      - run: cargo test --all ${{ inputs.features }} --release ${TESTS:-} ${TARGET:-} ${DOCTEST_XCOMPILE:-} ${BUILD_STD:-} ${{ inputs.test-args }}
      - run: cargo test --all ${{ inputs.features }} --release ${TESTS:-} ${TARGET:-} ${DOCTEST_XCOMPILE:-} ${BUILD_STD:-} ${{ inputs.test-args }}
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
        if: inputs.test-fat-lto
      - run: cargo careful test --all ${{ inputs.features }} ${TARGET:-} ${DOCTEST_XCOMPILE:-} ${{ inputs.careful-args }}
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -Z randomize-layout
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -Z randomize-layout
        if: inputs.careful && startsWith(matrix.rust, 'nightly') && !(contains(matrix.rust, '-windows-gnu') || contains(matrix.target, '-windows-gnu'))
      - run: cargo hack build --workspace --no-private --feature-powerset ${{ inputs.optional-deps }} --no-dev-deps ${TARGET:-} ${BUILD_STD:-} ${{ inputs.build-args }}
      - run: cargo hack build --workspace --no-private --feature-powerset ${{ inputs.optional-deps }} --no-dev-deps --target="${{ inputs.no-std-target }}" ${{ inputs.no-std-args }}
        if: inputs.no-std && steps.prepare.outputs.no-std == 'true' && matrix.target == ''
      - run: cargo minimal-versions build --workspace --no-private --detach-path-deps=skip-exact ${{ inputs.features }} ${TARGET:-} ${BUILD_STD:-} ${{ inputs.minimal-versions-args }}
        if: inputs.minimal-versions && steps.prepare.outputs.minimal-versions == 'true'
      - run: cargo minimal-versions build --workspace --no-private --detach-path-deps=skip-exact ${{ inputs.features }} --direct ${TARGET:-} ${BUILD_STD:-} ${{ inputs.direct-minimal-versions-args }}
        if: inputs.direct-minimal-versions && steps.prepare.outputs.direct-minimal-versions == 'true'
