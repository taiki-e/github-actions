permissions:
  contents: read

on:
  workflow_call:
    inputs:
      rust:
        required: false
        type: string
        default: nightly-2024-02-07
      target:
        required: false
        type: string
      args:
        required: false
        type: string

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  # Reusable workflows cannot inherit environment variables.
  ATOMIC_MAYBE_UNINIT_DENY_WARNINGS: 1
  CARGO_HACK_DENY_WARNINGS: 1
  CARGO_LLVM_COV_DENY_WARNINGS: 1
  CARGO_MINIMAL_VERSIONS_DENY_WARNINGS: 1
  CARGO_NO_DEV_DEPS_DENY_WARNINGS: 1
  CONST_FN_DENY_WARNINGS: 1
  PORTABLE_ATOMIC_DENY_WARNINGS: 1
  SEMIHOSTING_DENY_WARNINGS: 1

defaults:
  run:
    shell: bash

jobs:
  check-external-types:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - id: pre
        run: |
          set -eEuo pipefail
          IFS=$'\n\t'
          trap 's=$?; echo >&2 "$0: error on line "${LINENO}": ${BASH_COMMAND}"; exit ${s}' ERR
          metadata=$(cargo metadata --format-version=1 --no-deps)
          for id in $(jq <<<"${metadata}" '.workspace_members[]'); do
            pkg=$(jq <<<"${metadata}" ".packages[] | select(.id == ${id})")
            publish=$(jq <<<"${pkg}" -r '.publish')
            # Publishing is unrestricted if null, and forbidden if an empty array.
            if [[ "${publish}" == "[]" ]]; then
              continue
            fi
            if jq <<<"${pkg}" -r '.targets[] | .kind[]' | grep -q lib; then
              echo "has-lib=true" >>"${GITHUB_OUTPUT}"
              break
            fi
          done
      - name: Install Rust
        run: rustup toolchain add "${{ inputs.rust }}" --no-self-update --profile minimal && rustup default "${{ inputs.rust }}"
        if: steps.pre.outputs.has-lib == 'true'
      - uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-check-external-types@0.1.11
        if: steps.pre.outputs.has-lib == 'true'
      # Refs:
      # - https://github.com/rust-lang/docs.rs/blob/HEAD/crates/metadata/lib.rs
      # - https://github.com/rust-lang/docs.rs/blob/HEAD/src/docbuilder/rustwide_builder.rs
      # - https://github.com/awslabs/cargo-check-external-types
      # NB: sync with docs.yml
      # TODO: move this script to its own file to apply shfmt and shellcheck.
      - name: Run cargo check-external-types
        run: |
          set -eEuo pipefail
          trap 's=$?; echo >&2 "$0: error on line "${LINENO}": ${BASH_COMMAND}"; exit ${s}' ERR
          # docs.rs uses -Z rustdoc-scrape-examples since https://github.com/rust-lang/docs.rs/pull/1954
          base_args=(${{ inputs.args }})
          IFS=$'\n\t'
          metadata=$(cargo metadata --format-version=1 --no-deps)
          # Handle target inputs.
          input_target="${{ inputs.target }}"
          base_targets=()
          if [[ -n "${input_target}" ]]; then
            while read -rd,; do
              base_targets+=(--target="${REPLY}")
              rustup target add "${REPLY}" || true # tier 3 targets fail to install rustup target
            done <<<"${input_target},"
          fi
          # Run cargo check-external-types for public crates with features specified in docs.rs metadata in Cargo.toml.
          for id in $(jq <<<"${metadata}" '.workspace_members[]'); do
            args=("${base_args[@]}")
            pkg=$(jq <<<"${metadata}" ".packages[] | select(.id == ${id})")
            publish=$(jq <<<"${pkg}" -r '.publish')
            # Publishing is unrestricted if null, and forbidden if an empty array.
            if [[ "${publish}" == "[]" ]]; then
              continue
            fi
            if ! jq <<<"${pkg}" -r '.targets[] | .kind[]' | grep -q lib; then
              continue
            fi
            manifest_path=$(jq <<<"${pkg}" -r '.manifest_path')
            args+=(--manifest-path="${manifest_path}")
            manifest_dir=$(dirname "${manifest_path}")
            docs_rs_metadata=$(jq <<<"${pkg}" '.metadata.docs.rs')
            if [[ "${docs_rs_metadata}" == null ]]; then
              docs_rs_metadata=$(jq <<<"${pkg}" '.metadata."docs.rs"')
              if [[ "${docs_rs_metadata}" == null ]]; then
                docs_rs_metadata='{}'
              fi
            fi
            pkg_targets=()
            # Respect target-related fields specified in docs.rs metadata if inputs.target is empty.
            if [[ -z "${input_target}" ]]; then
              default_target=$(jq <<<"${docs_rs_metadata}" '."default-target"')
              if [[ "${default_target}" != null ]]; then
                pkg_targets+=(--target="${default_target}")
                rustup target add "${default_target}" || true # tier 3 targets fail to install rustup target
              fi
              if [[ "$(jq <<<"${docs_rs_metadata}" '.targets')" != null ]]; then
                for target in $(jq <<<"${docs_rs_metadata}" -r '.targets[]'); do
                  pkg_targets+=(--target="${target}")
                  rustup target add "${target}" || true # tier 3 targets fail to install rustup target
                done
              fi
            else
              pkg_targets+=("${base_targets[@]}")
            fi
            if [[ "$(jq <<<"${docs_rs_metadata}" '.features')" != null ]]; then
              for feature in $(jq <<<"${docs_rs_metadata}" -r '.features[]'); do
                args+=(--features="${feature}")
              done
            fi
            if [[ "$(jq <<<"${docs_rs_metadata}" '."all-features"')" == 'true' ]]; then
              args+=(--all-features)
            fi
            if [[ "$(jq <<<"${docs_rs_metadata}" '."no-default-features"')" == 'true' ]]; then
              args+=(--no-default-features)
            fi
            if [[ ${#pkg_targets[@]} -gt 0 ]]; then
              # sort and dedup
              IFS=$'\n'
              # shellcheck disable=SC2207
              pkg_targets=($(LC_ALL=C sort -u <<<"${pkg_targets[*]}"))
              IFS=$'\n\t'
              for target in "${pkg_targets[@]}"; do
                (
                  set -x
                  cargo check-external-types "${args[@]}" "${target}"
                )
              done
            else
              (
                set -x
                cargo check-external-types "${args[@]}"
              )
            fi
          done
        if: steps.pre.outputs.has-lib == 'true'
