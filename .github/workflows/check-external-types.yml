permissions:
  contents: read

on:
  workflow_call:
    inputs:
      rust:
        required: false
        type: string
        default: nightly-2025-08-06
      target:
        required: false
        type: string
      args:
        required: false
        type: string

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  # Reusable workflows cannot inherit environment variables.
  ATOMIC_MAYBE_UNINIT_DENY_WARNINGS: 1
  CARGO_HACK_DENY_WARNINGS: 1
  CARGO_LLVM_COV_DENY_WARNINGS: 1
  CARGO_MINIMAL_VERSIONS_DENY_WARNINGS: 1
  CARGO_NO_DEV_DEPS_DENY_WARNINGS: 1
  CONST_FN_DENY_WARNINGS: 1
  PORTABLE_ATOMIC_DENY_WARNINGS: 1
  SEMIHOSTING_DENY_WARNINGS: 1

defaults:
  run:
    shell: bash --noprofile --norc -CeEuo pipefail {0}

jobs:
  check-external-types:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ inputs.rust }}
      - uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-check-external-types@0.3.0
      # Refs:
      # - https://github.com/rust-lang/docs.rs/blob/HEAD/crates/metadata/lib.rs
      # - https://github.com/rust-lang/docs.rs/blob/HEAD/src/docbuilder/rustwide_builder.rs
      # - https://github.com/awslabs/cargo-check-external-types
      # NB: sync with docs.yml
      - name: Run cargo check-external-types
        run: |
          trap -- 's=$?; printf >&2 "%s\n" "${0##*/}:${LINENO}: \`${BASH_COMMAND}\` exit with ${s}"; exit ${s}' ERR
          retry() {
            for i in {1..10}; do
              if "$@"; then
                return 0
              else
                sleep "${i}"
              fi
            done
            "$@"
          }
          # docs.rs uses -Z rustdoc-scrape-examples since https://github.com/rust-lang/docs.rs/pull/1954
          # shellcheck disable=SC2206
          base_args=(${{ inputs.args }})
          IFS=$'\n\t'
          metadata=$(cargo metadata --format-version=1 --no-deps)
          # Handle target inputs.
          input_target="${{ inputs.target }}"
          base_targets=()
          if [[ -n "${input_target}" ]]; then
            while read -rd,; do
              base_targets+=(--target="${REPLY}")
              retry rustup target add "${REPLY}" || true # tier 3 targets fail to install rustup target
            done <<<"${input_target},"
          fi
          # Run cargo check-external-types for public crates with features specified in docs.rs metadata in Cargo.toml.
          # Publishing is unrestricted if null, and forbidden if an empty array.
          for pkg in $(jq -c '. as $metadata | .workspace_members[] as $id | $metadata.packages[] | select(.id == $id and .publish != [] and .targets[].kind[] == "lib")' <<<"${metadata}"); do
            args=("${base_args[@]}")
            eval "$(jq -r '@sh "MANIFEST_PATH=\(.manifest_path)"' <<<"${pkg}")"
            args+=(--manifest-path="${MANIFEST_PATH}")
            docs_rs_metadata=$(jq '.metadata.docs.rs' <<<"${pkg}")
            if [[ "${docs_rs_metadata}" == "null" ]]; then
              docs_rs_metadata=$(jq '.metadata."docs.rs"' <<<"${pkg}")
              if [[ "${docs_rs_metadata}" == "null" ]]; then
                docs_rs_metadata='{}'
              fi
            fi
            pkg_targets=()
            # Respect target-related fields specified in docs.rs metadata if inputs.target is empty.
            if [[ -z "${input_target}" ]]; then
              default_target=$(jq -r '."default-target"' <<<"${docs_rs_metadata}")
              if [[ "${default_target}" != null ]]; then
                pkg_targets+=(--target="${default_target}")
                retry rustup target add "${default_target}" || true # tier 3 targets fail to install rustup target
              fi
              if [[ "$(jq '.targets' <<<"${docs_rs_metadata}")" != null ]]; then
                for target in $(jq -r '.targets[]' <<<"${docs_rs_metadata}"); do
                  pkg_targets+=(--target="${target}")
                  retry rustup target add "${target}" || true # tier 3 targets fail to install rustup target
                done
              fi
            else
              pkg_targets+=("${base_targets[@]}")
            fi
            if [[ "$(jq '.features' <<<"${docs_rs_metadata}")" != null ]]; then
              for feature in $(jq -r '.features[]' <<<"${docs_rs_metadata}"); do
                args+=(--features="${feature}")
              done
            fi
            if [[ "$(jq '."all-features"' <<<"${docs_rs_metadata}")" == 'true' ]]; then
              args+=(--all-features)
            fi
            if [[ "$(jq '."no-default-features"' <<<"${docs_rs_metadata}")" == 'true' ]]; then
              args+=(--no-default-features)
            fi
            if [[ ${#pkg_targets[@]} -gt 0 ]]; then
              # sort and dedup
              IFS=$'\n'
              # shellcheck disable=SC2207
              pkg_targets=($(LC_ALL=C sort -u <<<"${pkg_targets[*]}"))
              IFS=$'\n\t'
              for target in "${pkg_targets[@]}"; do
                (
                  set -x
                  cargo check-external-types "${args[@]}" "${target}"
                )
              done
            else
              (
                set -x
                cargo check-external-types "${args[@]}"
              )
            fi
          done
