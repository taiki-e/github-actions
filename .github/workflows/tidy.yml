permissions:
  contents: read

on:
  workflow_call:
    inputs:
      rust:
        required: false
        type: string
        default: nightly
      target:
        required: false
        type: string
      args:
        required: false
        type: string
      clippy:
        required: false
        type: boolean
        default: true
      unqualified_local_imports:
        required: false
        type: boolean
        default: true

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  # Reusable workflows cannot inherit environment variables.
  ATOMIC_MAYBE_UNINIT_DENY_WARNINGS: 1
  CARGO_HACK_DENY_WARNINGS: 1
  CARGO_LLVM_COV_DENY_WARNINGS: 1
  CARGO_MINIMAL_VERSIONS_DENY_WARNINGS: 1
  CARGO_NO_DEV_DEPS_DENY_WARNINGS: 1
  CONST_FN_DENY_WARNINGS: 1
  PORTABLE_ATOMIC_DENY_WARNINGS: 1
  SEMIHOSTING_DENY_WARNINGS: 1

defaults:
  run:
    shell: bash --noprofile --norc -CeEuo pipefail {0}

jobs:
  tidy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      pull-requests: write # for gh pr edit --add-assignee
      repository-projects: read # for gh pr edit --add-assignee
    steps:
      - uses: taiki-e/checkout-action@v1
      - id: pre
        run: |
          if [[ -n "$(git ls-files '*.rs')" ]]; then
            printf 'rust=true\n' >>"${GITHUB_OUTPUT}"
          fi
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ inputs.rust }}
          component: rustfmt
        if: steps.pre.outputs.rust == 'true'
      - uses: taiki-e/install-action@shellcheck
      - uses: taiki-e/install-action@shfmt
      - run: printf '%s\n' "RUSTFLAGS=${RUSTFLAGS} -Z crate-attr=feature(unqualified_local_imports) -D unqualified_local_imports" >>"${GITHUB_ENV}"
        if: always() && steps.pre.outputs.rust == 'true' && inputs.unqualified_local_imports
      - name: Run cargo clippy
        run: |
          trap -- 's=$?; printf >&2 "%s\n" "${0##*/}:${LINENO}: \`${BASH_COMMAND}\` exit with ${s}"; exit ${s}' ERR
          retry() {
            for i in {1..10}; do
              if "$@"; then
                return 0
              else
                sleep "${i}"
              fi
            done
            "$@"
          }
          # shellcheck disable=SC2206
          args=(${{ inputs.args }})
          if [[ "${{ inputs.args }}" != *"-features"* ]]; then
            args+=(--all-features)
          fi
          IFS=$'\n\t'
          # metadata=$(cargo metadata --format-version=1 --no-deps)
          # Handle target inputs.
          input_target="${{ inputs.target }}"
          targets=()
          tier3_targets=()
          if [[ -n "${input_target}" ]]; then
            while read -rd,; do
              if rustup target list | cut -d' ' -f1 | grep -Eq "^${REPLY}$"; then
                retry rustup target add "${REPLY}"
                targets+=(--target="${REPLY}")
              else
                tier3_targets+=(--target="${REPLY}")
              fi
            done <<<"${input_target},"
          fi
          if [[ -n "${RUSTFLAGS:-}" ]]; then
              printf '%s\n' "+ RUSTFLAGS='${RUSTFLAGS}' \\"
          fi
          if [[ -n "${RUSTDOCFLAGS:-}" ]]; then
              printf '%s\n' "+ RUSTDOCFLAGS='${RUSTDOCFLAGS}' \\"
          fi
          if [[ -z "${input_target}" ]] || [[ ${#targets[@]} -gt 0 ]]; then
            retry rustup component add clippy
            (
              set -x
              cargo clippy --workspace --all-targets "${targets[@]}" "${args[@]}"
            )
          fi
          if [[ ${#tier3_targets[@]} -gt 0 ]]; then
            retry rustup component add clippy rust-src
            for target in "${tier3_targets[@]}"; do
              (
                set -x
                cargo clippy --workspace --all-targets "${target}" -Z build-std "${args[@]}"
              )
            done
          fi
          # TODO: [lints] table is not respected...
          # # Refs:
          # # - https://github.com/rust-lang/rust/issues/56232
          # # - https://github.com/Nemo157/dotfiles/blob/cee1b90cb23089990fe9bc559b7c2f012d0a59f0/packages/cargo-rustdoc-clippy.sh
          # export RUSTDOCFLAGS="${RUSTDOCFLAGS:-} -Z unstable-options --no-run --nocapture --test-builder clippy-driver"
          # # filter bin-only crate due to https://github.com/rust-lang/cargo/issues/5477
          # for manifest_path in $(jq -r '. as $metadata | .workspace_members[] as $id | $metadata.packages[] | select(.id == $id and (.targets[].kind[] == "lib" or .targets[].kind[] == "proc-macro")) | .manifest_path' <<<"${metadata}"); do
          #   (
          #     set -x
          #     cargo test --manifest-path="${manifest_path}" --doc "${args[@]}"
          #   )
          # done
        if: always() && steps.pre.outputs.rust == 'true' && inputs.clippy
      - run: cat -- tools/.tidy-check-license-headers
        if: always()
      - run: cat -- .cspell.json
        if: always()
      - run: printf 'REMOVE_UNUSED_WORDS=1\n' >>"${GITHUB_ENV}"
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main')
      - run: tools/tidy.sh
        if: always()
      - id: diff
        run: |
          git config user.name 'Taiki Endo'
          git config user.email 'te316e89@gmail.com'
          git add -N .github/.cspell
          if ! git diff --exit-code -- .github/.cspell; then
            git add .github/.cspell
            git commit -m "Update cspell dictionary"
            printf 'success=false\n' >>"${GITHUB_OUTPUT}"
          fi
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main')
      - id: create-pull-request
        uses: peter-evans/create-pull-request@v7
        with:
          title: Update cspell dictionary
          body: |
            Auto-generated by CI using [create-pull-request](https://github.com/peter-evans/create-pull-request).
          branch: update-cspell-dictionary
          token: ${{ secrets.CREATE_PR_TOKEN }}
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main') && steps.diff.outputs.success == 'false'
      - name: Notify PR author by assigning PR
        run: gh pr edit --add-assignee taiki-e "${PR_NUMBER:?}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.create-pull-request.outputs.pull-request-number }}
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main') && steps.diff.outputs.success == 'false'
      - run: git add -N . && git diff --exit-code
