permissions:
  contents: read

on:
  workflow_call:
    inputs:
      event_name:
        required: false
        type: string
      target:
        required: false
        type: string
        # macOS cannot be included by default since cannot be compiled on pre-1.54:
        # https://github.com/rust-lang/rust/issues/105167
        default: x86_64-unknown-linux-gnu,x86_64-pc-windows-msvc
      args:
        required: false
        type: string
      all-features:
        required: false
        type: boolean
        default: true

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  # Reusable workflows cannot inherit environment variables.
  ATOMIC_MAYBE_UNINIT_DENY_WARNINGS: 1
  CARGO_HACK_DENY_WARNINGS: 1
  CARGO_LLVM_COV_DENY_WARNINGS: 1
  CARGO_MINIMAL_VERSIONS_DENY_WARNINGS: 1
  CARGO_NO_DEV_DEPS_DENY_WARNINGS: 1
  CONST_FN_DENY_WARNINGS: 1
  PORTABLE_ATOMIC_DENY_WARNINGS: 1
  SEMIHOSTING_DENY_WARNINGS: 1

defaults:
  run:
    shell: bash --noprofile --norc -CeEuo pipefail {0}

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: taiki-e/checkout-action@v1
      - id: prepare
        run: |
          trap -- 's=$?; printf >&2 "%s\n" "${0##*/}:${LINENO}: \`${BASH_COMMAND}\` exit with ${s}"; exit ${s}' ERR
          IFS=$'\n\t'
          # Handle target inputs.
          input_target="${{ inputs.target }}"
          linux_target=''
          apple_target=''
          windows_target=''
          if [[ -n "${input_target}" ]]; then
            while read -rd,; do
              case "${REPLY}" in
                *-apple-*) apple_target+=" --target ${REPLY}" ;;
                *-windows*) windows_target+=" --target ${REPLY}" ;;
                *) linux_target+=" --target ${REPLY}" ;;
              esac
            done <<<"${input_target},"
          fi
          linux_target="${linux_target# }"
          apple_target="${apple_target# }"
          windows_target="${windows_target# }"
          printf '%s\n' "linux-target=${linux_target}" >>"${GITHUB_OUTPUT}"
          printf '%s\n' "apple-target=${apple_target}" >>"${GITHUB_OUTPUT}"
          printf '%s\n' "windows-target=${windows_target}" >>"${GITHUB_OUTPUT}"
          matrix=''
          [[ -z "${linux_target}" ]] || matrix+=',"ubuntu-latest"'
          [[ -z "${apple_target}" ]] || matrix+=',"macos-latest"'
          [[ -z "${windows_target}" ]] || matrix+=',"windows-latest"'
          printf '%s\n' "matrix={\"os\":[${matrix#,}]}" >>"${GITHUB_OUTPUT}"
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
      linux-target: ${{ steps.prepare.outputs.linux-target }}
      apple-target: ${{ steps.prepare.outputs.apple-target }}
      windows-target: ${{ steps.prepare.outputs.windows-target }}

  build:
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: taiki-e/github-actions/free-device-space@main
      - uses: taiki-e/install-action@cargo-hack
      - run: |
          printf 'ALL_FEATURES=--all-features\n' >>"${GITHUB_ENV}"
        if: inputs.all-features && !contains(inputs.args, '--features') && !contains(inputs.args, '--no-default-features')
      # Make sure this crate can be built with MSRV and all later versions.
      # However, this takes time, so for PR, set the version interval.
      - run: |
          # shellcheck disable=SC2206
          args=(${{ inputs.args }})
          if [[ "${{ inputs.event_name }}" == 'pull_request' ]]; then
            args+=(--version-step 2)
          fi
          case "${{ matrix.os }}" in
            ubuntu-*) args=(${LINUX_TARGET:-}) ;;
            macos-*) args=(${APPLE_TARGET:-}) ;;
            windows-*) args=(${WINDOWS_TARGET:-}) ;;
            *) exit 1 ;;
          esac
          cargo hack build --workspace --no-private --no-dev-deps --version-range .. ${ALL_FEATURES:-} "${args[@]}"
        env:
          LINUX_TARGET: ${{ needs.prepare.outputs.linux-target }}
          APPLE_TARGET: ${{ needs.prepare.outputs.apple-target }}
          WINDOWS_TARGET: ${{ needs.prepare.outputs.windows-target }}
