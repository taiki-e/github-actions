permissions:
  contents: read

on:
  workflow_call:
    inputs:
      rust:
        required: false
        type: string
        default: stable
      workflow:
        required: false
        type: string
        default: .github/workflows/release.yml
      job:
        required: false
        type: string
        default: upload-assets

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  # Reusable workflows cannot inherit environment variables.
  ATOMIC_MAYBE_UNINIT_DENY_WARNINGS: 1
  CARGO_HACK_DENY_WARNINGS: 1
  CARGO_LLVM_COV_DENY_WARNINGS: 1
  CARGO_MINIMAL_VERSIONS_DENY_WARNINGS: 1
  CARGO_NO_DEV_DEPS_DENY_WARNINGS: 1
  CONST_FN_DENY_WARNINGS: 1
  PORTABLE_ATOMIC_DENY_WARNINGS: 1
  SEMIHOSTING_DENY_WARNINGS: 1

defaults:
  run:
    shell: bash --noprofile --norc -CeEuo pipefail {0}

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: taiki-e/checkout-action@v1
      - name: Prepare
        id: prepare
        run: |
          trap -- 's=$?; printf >&2 "%s\n" "${0##*/}:${LINENO}: \`${BASH_COMMAND}\` exit with ${s}"; exit ${s}' ERR
          pip3 install yq
          job=$(yq -c ".jobs.\"${{ inputs.job }}\"" "${{ inputs.workflow }}")
          matrix=$(jq -c '.strategy.matrix' <<<"${job}")
          if [[ "${matrix}" == "null" ]]; then
            printf '%s\n' "::error::'.jobs.${{ inputs.job }}.strategy.matrix' of ${{ inputs.workflow }} must set"
            exit 1
          fi
          printf '%s\n' "matrix=${matrix}" >>"${GITHUB_OUTPUT}"
          runs_on=$(jq -r '."runs-on"' <<<"${job}")
          if [[ "${runs_on}" != '$'"{{ matrix.os }}" ]] && [[ "${runs_on}" != '$'"{{ matrix.os || 'ubuntu-latest' }}" ]]; then
            printf '%s\n' "::error::'runs-on' must be "'$'"{{ matrix.os }} or "'$'"{{ matrix.os || 'ubuntu-latest' }}, but found ${runs_on}"
            exit 1
          fi
          # Handle inputs for upload-rust-binary-action.
          # https://github.com/taiki-e/upload-rust-binary-action/blob/HEAD/action.yml
          for input in $(jq -c '.steps[] | select(.uses == "taiki-e/upload-rust-binary-action@v1") | .with | to_entries[]' <<<"${job}"); do
            eval "$(jq -r '@sh "KEY=\(.key) value=\(.value)"' <<<"${input}")"
            case "${KEY}" in
              bin)
                if [[ "${value}" == *'$'"{{"* ]]; then
                  printf '%s\n' "::error::'"'$'"{{ .. }}' in 'bin' input option is not supported due to reusable workflow's limitation"
                  exit 1
                fi
                printf '%s\n' "bin=${value}" >>"${GITHUB_OUTPUT}"
                ;;
              target)
                if [[ "${value}" != "null" ]] && [[ "${value}" != '$'"{{ matrix.target }}" ]]; then
                  printf '%s\n' "::error::'target' input option must be "'$'"{{ matrix.target }} or not set"
                  exit 1
                fi
                ;;
              build-tool)
                if [[ "${value}" != "null" ]] && [[ "${value}" != '$'"{{ matrix.build-tool }}" ]]; then
                  printf '%s\n' "::error::'build-tool' input option must be "'$'"{{ matrix.build-tool }} or not set"
                  exit 1
                fi
                ;;
              tar)
                if [[ "${value}" == "null" ]]; then
                  value=unix
                elif [[ "${value}" == *'$'"{{"* ]]; then
                  printf '%s\n' "::error::'"'$'"{{ .. }}' in 'tar' input option is not supported due to reusable workflow's limitation"
                  exit 1
                fi
                printf '%s\n' "tar=${value}" >>"${GITHUB_OUTPUT}"
                ;;
              zip)
                if [[ "${value}" == "null" ]]; then
                  value=windows
                elif [[ "${value}" == *'$'"{{"* ]]; then
                  printf '%s\n' "::error::'"'$'"{{ .. }}' in 'zip' input option is not supported due to reusable workflow's limitation"
                  exit 1
                fi
                printf '%s\n' "zip=${value}" >>"${GITHUB_OUTPUT}"
                ;;
              *)
                printf '%s\n' "::error::'${KEY}' input option is not supported yet by this reusable workflow"
                exit 1
                ;;
            esac
          done
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
      bin: ${{ steps.prepare.outputs.bin }}
      tar: ${{ steps.prepare.outputs.tar }}
      zip: ${{ steps.prepare.outputs.zip }}

  build:
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ inputs.rust }}
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: matrix.build-tool != 'cross' && matrix.build-tool != 'cargo-zigbuild'
      - run: printf '%s\n' "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >>"${GITHUB_ENV}"
        if: contains(matrix.target, '-windows-msvc')
      - run: printf '%s\n' "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static -C link-self-contained=yes" >>"${GITHUB_ENV}"
        if: contains(matrix.target, '-linux-musl')
      # https://doc.rust-lang.org/rustc/platform-support.html
      - run: printf 'MACOSX_DEPLOYMENT_TARGET=10.12\n' >>"${GITHUB_ENV}"
        if: matrix.target == 'x86_64-apple-darwin'
      - run: printf 'MACOSX_DEPLOYMENT_TARGET=11.0\n' >>"${GITHUB_ENV}"
        if: matrix.target == 'aarch64-apple-darwin' || matrix.target == 'universal-apple-darwin'
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          dry-run: true
          bin: ${{ needs.prepare.outputs.bin }}
          target: ${{ matrix.target }}
          build-tool: ${{ matrix.build-tool }}
          tar: ${{ needs.prepare.outputs.tar }}
          zip: ${{ needs.prepare.outputs.zip }}
          ref: refs/tags/dummy
          token: dummy
      - name: Get target name for artifact
        id: artifact-target
        run: |
          target="${{ matrix.target }}"
          if [[ -z "${target}" ]]; then
            host=$(rustc -vV | grep -E '^host:' | cut -d' ' -f2)
            printf '%s\n' "artifact-target=${host}" >>"${GITHUB_OUTPUT}"
          elif [[ "${{ matrix.build-tool }}" == 'cargo-zigbuild' ]]; then
            printf '%s\n' "artifact-target=${target%%.*}" >>"${GITHUB_OUTPUT}"
          else
            printf '%s\n' "artifact-target=${target}" >>"${GITHUB_OUTPUT}"
          fi
      # For debugging
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-target.outputs.artifact-target }}
          path: ${{ needs.prepare.outputs.bin }}-${{ steps.artifact-target.outputs.artifact-target }}.*
